rect(0.73,0.4, 1.07, 0.6)
arrows(0.76, 0.78, 0.85, 0.62, length=0.08)
text(0, 0.1, 'continuous')
rect(-0.17, 0, 0.17, 0.2)
arrows(0.13, 0.38, 0.05, 0.22, length=0.08)
text(0.39, 0.1, 'discrete')
rect(0.25, 0, 0.53, 0.2)
arrows(0.35, 0.38, 0.4, 0.22, length=0.08)
text(0.77, 0.105, 'regular\ncategorical', col=COL[6], cex=0.7)
rect(0.64, 0, 0.9, 0.2, border=COL[6])
arrows(0.82, 0.38, 0.77, 0.22, length=0.08, col=COL[6])
text(1.12, 0.1, 'ordinal', col=COL[6])
rect(0.99, 0, 1.25, 0.2, border=COL[6])
arrows(1.02, 0.38, 1.1, 0.22, length=0.08, col=COL[6])
plot(county$poverty, county$fed_spend, pch=20, cex=0.7, col=COL[1,3], ylim=c(0,31.25), xlab="", ylab="Federal Spending Per Capita", axes=FALSE)
axis(1)
axis(2, at=seq(0, 30, 10))
box()
points(county$poverty, county$fed_spend, pch=20, cex = 0.18)
#rug(county$poverty[county$fed_spend > 40], side=3)
mtext("Poverty Rate (Percent)", 1, 1.9)
t1 <- county$poverty[1088]
t2 <- county$fed_spend[1088]
lines(c(t1,t1), c(-10,t2), lty=2, col=COL[4])
lines(c(-10,t1), c(t2,t2), lty=2, col=COL[4])
points(t1, t2, col=COL[4])
text(43, 29, "32 counties with higher\nfederal spending are not shown", cex=0.8)
pch <- 1
cex <- sqrt(county$pop2010/1e6)
colPop <- fadeColor(ifelse(cex > 0.35, COL[4], COL[1]), substr(gray(0.6+cex*0.1),2,3))
colSm  <- colPop
cexF   <- 2
cex <- 0.7
pch <- 20
gp1 <- cex < 0.32
colSm  <- COL[1,3]
colPop <- COL[1,3]
cexF   <- 1
plot(county$multiunit[gp1], county$homeownership[gp1], pch=pch, col=colSm, xlab="", ylab="Percent of Homeownership", axes=FALSE, cex=ifelse(cex < 0.32, 0.32, cex)[gp1], xlim=range(county$multiunit), ylim=range(county$homeownership))
at = seq(0, 100, 20)
axis(1, at, paste0(at, "%"))
axis(2, at, paste0(at, "%"))
box()
points(county$multiunit[!gp1], county$homeownership[!gp1], pch=pch, col=colPop, xlab="", ylab="Percent of Homeownership", cex=ifelse(cex < 0.32, 0.32, cex)[!gp1])
points(county$multiunit[!gp1], county$homeownership[!gp1], pch=20, cex = 0.2, col=COL[5,3])
#points(cc$housing_multi_unit, cc$home_ownership, pch=".", cex=1)
#rug(county$poverty[county$fed_spend > 40], side=3)
mtext("Percent of Units in Multi-Unit Structures", 1, 1.9, cex= 1)
county %>%
gf_point(fed_spend~poverty)
county %>%
filter(fed_spend<32) %>%
gf_point(fed_spend~poverty,
xlab="Poverty Rate (Percent)",
ylab="Federal Spending Per Capita",
title="A scatterplot showing fed_spend against poverty",
subtitle =  "Owsley County of Kentucky",
cex=1,alpha=0.2) %>%
gf_theme(theme_classic())
names(email50)
head(email50,n=10)
names(county)
dim(county)
dim(countyComplete)
names(countyComplete)
names(county)
dim(county)
str(county)
stent_study
stent_study %>%
mutate(id=1:441)
mutate(id=1:451)
1:451
stent_study %>%
mutate(id=1:451)
stent_study %>%
mutate(id=1:451) %>%
pivot_longer(c('outcome30','outcome365'),names_to = 'Time',values_to = 'Result')
stent_study <- read_csv("data/stent_study.csv")
stent_study %>%
mutate(id=1:451) %>%
pivot_longer(c('outcome30','outcome365'),names_to = 'Time',values_to = 'Result')
stent_study <- read_csv("data/stent_study.csv")
stent_study %>%
mutate(patient_id=1:451) %>%
pivot_longer(c('outcome30','outcome365'),names_to = 'Time',values_to = 'Result')
stent_study <- read_csv("data/stent_study.csv")
stent_study %>%
mutate(patient_id=1:451) %>%
pivot_longer(c('outcome30','outcome365'),names_to = 'Time',values_to = 'Result') %>%
head(n=10)
stent_study <- read_csv("data/stent_study.csv")
stent_study %>%
mutate(patient_id=1:451) %>%
rename(Month=outcome30,Year=outcome365)
pivot_longer(c('Month','Year'),names_to = 'Time',values_to = 'Result') %>%
head(n=10)
stent_study <- read_csv("data/stent_study.csv")
stent_study %>%
mutate(patient_id=1:451) %>%
rename(Month=outcome30,Year=outcome365) %>%
pivot_longer(c('Month','Year'),names_to = 'Time',values_to = 'Result') %>%
head(n=10)
View(stent_study)
View(stent_study)
stent_study %>%
mutate(patient_id=1:451) %>%
rename(Month=outcome30,Year=outcome365) %>%
pivot_longer(c('Month','Year'),names_to = 'Time',values_to = 'Result') %>%
select(patient_id,trmt,Time,Result) %>%
head(n=10)
stent_study %>%
mutate(patient_id=1:451) %>%
rename(Month=outcome30,Year=outcome365) %>%
pivot_longer(c('Month','Year'),names_to = 'time',values_to = 'result') %>%
select(patient_id,trmt,time,result) %>%
head(n=10)
stent_study %>%
mutate(patient_id=1:451) %>%
rename(month=outcome30,year=outcome365) %>%
pivot_longer(c('month','year'),names_to = 'time',values_to = 'result') %>%
select(patient_id,trmt,time,result) %>%
head(n=10)
knitr::opts_chunk$set(echo = TRUE)
gf_bar(~outcome30|trmt,data = stent_study)
stent_study %>%
gf_props(~trmt,fill=~outcome30,position='fill') %>%
gf_labs(title="Impact of Stents of Stroke",
subtitle='Experiment with 451 Patients',
x="Experimental Group",
y="Number of Events")
stent_study <- data.frame(group =c(rep('trmt', 224), rep('control', 227)), outcome30 = c(rep(c('stroke', 'no_event'), c(33, 191)), rep(c('stroke', 'no_event'), c(13, 214))), outcome365 = c(rep(c('stroke', 'no_event'), c(45, 179)), rep(c('stroke', 'no_event'), c(28, 199))))
write_csv(stent_study,"data\stent_study.csv")
write_csv(stent_study,"data/stent_study.csv")
stent_study <- read_csv("data/stent_study.csv")
head(stent_study,n=10)
stent_study %>%
sample()
stent_study %>%
sample() %>%
head()
stent_study <- data.frame(group =c(rep('trmt', 224), rep('control', 227)), outcome30 = c(rep(c('stroke', 'no_event'), c(33, 191)), rep(c('stroke', 'no_event'), c(13, 214))), outcome365 = c(rep(c('stroke', 'no_event'), c(45, 179)), rep(c('stroke', 'no_event'), c(28, 199))))
stent_study <- stent_study %>%
sample() %>%
select(-orig.id)
stent_study
write_csv(stent_study,"data/stent_study.csv")
stent_study <- read_csv("data/stent_study.csv")
head(stent_study,n=10)
tally(outcome30~group,data=stent_study,margins = TRUE)
tally(outcome30~group,data=stent_study,format='proportion',margins = TRUE)
gf_bar(~outcome30|group,data = stent_study)
stent_study %>%
gf_props(~group,fill=~outcome30,position='fill') %>%
gf_labs(title="Impact of Stents of Stroke",
subtitle='Experiment with 451 Patients',
x="Experimental Group",
y="Number of Events")
stent_study %>%
mutate(patient_id=1:451) %>%
rename(month=outcome30,year=outcome365) %>%
pivot_longer(c('month','year'),names_to = 'time',values_to = 'result') %>%
select(patient_id,group,time,result) %>%
head(n=10)
names(county)
poverty
summary(county$poverty)
summary(county$fed_spend)
summary(county$pop2000)
knitr::opts_chunk$set(echo = TRUE)
data(COL)
plot(email50$num_char, email50$line_breaks, pch=19, cex=1.3, col=COL[1,4], xlab="", ylab="Number of Lines", axes=FALSE)
library(tidyverse)
library(mosaic)
library(openintro)
plot(county$poverty, county$fed_spend, pch=20, cex=0.7, col=COL[1,3], ylim=c(0,31.25), xlab="", ylab="Federal Spending Per Capita", axes=FALSE)
axis(1)
axis(2, at=seq(0, 30, 10))
box()
points(county$poverty, county$fed_spend, pch=20, cex = 0.18)
#rug(county$poverty[county$fed_spend > 40], side=3)
mtext("Poverty Rate (Percent)", 1, 1.9)
t1 <- county$poverty[1088]
t2 <- county$fed_spend[1088]
lines(c(t1,t1), c(-10,t2), lty=2, col=COL[4])
lines(c(-10,t1), c(t2,t2), lty=2, col=COL[4])
points(t1, t2, col=COL[4])
text(43, 29, "32 counties with higher\nfederal spending are not shown", cex=0.8)
data(COL)
plot(email50$num_char, email50$line_breaks, pch=19, cex=1.3, col=COL[1,4], xlab="", ylab="Number of Lines", axes=FALSE)
axis(2)
axis(1)
box()
points(email50$num_char, email50$line_breaks, cex=1.3, col=COL[1,1])
mtext("Number of Characters (in thousands)", 1, 1.9)
data(cars)
data(COL)
plot(cars$weight, cars$price, xlab='Weight (Pounds)', ylab='Price ($1000s)', pch=19, col=COL[1,2], ylim=c(0, max(cars$price)))
w  <- seq(1000, 5000, 100)
# Rough Model
g1 <- lm(price ~ weight, cars, weights=1/weight^2)
g2 <- lm(price ~ weight + I(weight^2), cars, weights=1/weight^2)
p  <- predict(g2, data.frame(weight=w))
lines(w, p, lty=2, col=COL[5,3])
library(openintro)
library(mosaic)
knitr::opts_chunk$set(echo = TRUE)
email50 %>%
gf_dotplot(~num_char)
email50 %>%
gf_dotplot(~num_char,xlab="Number of Characters (in thousands)",ylab="")
email50 %>%
gf_dotplot(~num_char,xlab="Number of Characters (in thousands)",ylab="")
email50 %>%
gf_dotplot(~num_char,xlab="Number of Characters (in thousands)",ylab="",method="histodot")
email50$num_char
dotchart(email50$num_char)
gf_point(~num_char,data=email50)
lattice::dotplot(num_char,email50)
lattice::dotplot(num_char,data=email50)
lattice::dotplot(x=num_char,data=email50)
names(email50)
lattice::dotplot(~num_char,data=email50)
lattice::dotplot(~num_char,data=email50,xlab="Number of Characters (in thousands)",ylab="")
lattice::dotplot(~num_char,data=email50,xlab="Number of Characters (in thousands)",ylab="")
data(COL)
plot(email50$num_char, email50$line_breaks, pch=19, cex=1.3, col=COL[1,4], xlab="", ylab="Number of Lines", axes=FALSE)
axis(2)
axis(1)
box()
points(email50$num_char, email50$line_breaks, cex=1.3, col=COL[1,1])
mtext("Number of Characters (in thousands)", 1, 1.9)
cut(email50$num_char,breaks = seq(0,65,5))
table(cut(email50$num_char,breaks = seq(0,65,5)))
tally(~cut(email50$num_char,breaks = seq(0,65,5)))
table(cut(email50$num_char,breaks = seq(0,65,5)))
tally(~cut(email50$num_char,breaks = seq(0,65,5)))
?tally
table(cut(email50$num_char,breaks = seq(0,65,5)))
?gf_histogram
email50$num_char
email50 %>%
gf_histogram(num_char)
email50 %>%
gf_histogram(~num_char)
email50 %>%
gf_histogram(~num_char,binwidth = 5)
email50 %>%
gf_histogram(~num_char,binwidth = 5,boundary=0)
email50 %>%
gf_histogram(~num_char,binwidth = 5,boundary=0,xlab="The Number of Characters (in thousands)")
email50 %>%
gf_histogram(~num_char,binwidth = 5,boundary=0,xlab="The Number of Characters (in thousands)") %>%
gf_theme(theme_classic())
?gf_histogramh
email50 %>%
gf_histogramh(~num_char,binwidth = 5,boundary=0,xlab="The Number of Characters (in thousands)")
email50 %>%
gf_dhistogram(~num_char,binwidth = 5,boundary=0,xlab="The Number of Characters (in thousands)")
gf_histogram(~num_char,data=email50)
gf_histogram(~num_char,data=email50)
set.seed(51)
x1 <- rchisq(65, 6)
x2 <- c(rchisq(22, 5.8), rnorm(40, 16.5, 2))
x3 <- c(rchisq(20, 3), rnorm(35, 12), rnorm(42, 18, 1.5))
gf_histogram(~x1)
gf_histogram(~x1,axes=FALSE)
gf_histogram(~x1,xlab='', ylab='', col=COL[1])
gf_histogram(~x1,xlab='', ylab='', fill=COL[1])
axis(1)
data(COL)
set.seed(51)
x1 <- rchisq(65, 6)
x2 <- c(rchisq(22, 5.8), rnorm(40, 16.5, 2))
x3 <- c(rchisq(20, 3), rnorm(35, 12), rnorm(42, 18, 1.5))
par(mfrow=c(1,3), mar=c(1.9, 2, 1, 2), mgp=c(2.4, 0.7, 0))
gf_histogram(~x1,xlab='', ylab='', fill=COL[1])
gf_histogram(~x2,xlab='', ylab='', fill=COL[1])
gf_histogram(~x3,xlab='', ylab='', fill=COL[1])
data(COL)
set.seed(51)
x1 <- rchisq(65, 6)
x2 <- c(rchisq(22, 5.8), rnorm(40, 16.5, 2))
x3 <- c(rchisq(20, 3), rnorm(35, 12), rnorm(42, 18, 1.5))
par(mfrow=c(1,3), mar=c(1.9, 2, 1, 2), mgp=c(2.4, 0.7, 0))
gf_histogram(~x1,xlab='', ylab='', fill=COL[1])
gf_histogram(~x2,xlab='', ylab='', fill=COL[1])
gf_histogram(~x3,xlab='', ylab='', fill=COL[1])
gf_histogram(~x1,xlab='', ylab='', fill=COL[1],bins=10)
gf_histogram(~x2,xlab='', ylab='', fill=COL[1],bins=10)
gf_histogram(~x3,xlab='', ylab='', fill=COL[1],bins=10)
lattice::dotplot(~num_char,data=email50,xlab="Number of Characters (in thousands)",ylab="")
lattice::dotplot(~num_char,data=email50,xlab="Number of Characters (in thousands)",ylab="")
d <- email50$num_char; round(mean(d),1); d[c(1,2,3,50)]; d[c(1,2,3,50)] - round(mean(d),1); (d[c(1,2,3,50)] - round(mean(d)))^2; sum((d - round(mean(d)))^2)/49; sqrt(sum((d - round(mean(d)))^2)/49); var(d); sd(d)
dotPlot(d)
dotPlot(d, col=1, pch=20, cex=0.3, add=TRUE, axes=FALSE)
dotPlot(d, col=COL[1,2], pch=20, cex=2, add=TRUE, axes=FALSE)
dotPlot(d, col=COL[1,2], pch=20, cex=2, xlim=range(d)+sd(d)/2*c(-1,1), axes=FALSE, xlab=expression(paste("Number of Characters (in thousands), ", bar(x)," = 11,600, ", s[x], " = 13,130")), type='n')
dotPlot(d, col=COL[1,2], pch=20, cex=2, xlim=range(d)+sd(d)/2*c(-1,1), axes=FALSE, xlab=expression(paste("Number of Characters (in thousands), ", bar(x)," = 11,600, ", s[x], " = 13,130")))
d <- email50$num_char
dotPlot(d, col=COL[1,2], pch=20, cex=2, xlim=range(d)+sd(d)/2*c(-1,1), axes=FALSE, xlab=expression(paste("Number of Characters (in thousands), ", bar(x)," = 11,600, ", s[x], " = 13,130")))
d <- email50$num_char
dotPlot(d, col=1, pch=20, cex=0.3, add=TRUE, axes=FALSE)
x1 <- rep(0:1, c(10,10))
x1 <- (x1-mean(x1))/sd(x1)
x2 <- qnorm(seq(0.0025,0.9975, 0.00049))
x2 <- (x2-mean(x2))/sd(x2)
x3 <- qchisq(seq(0.01,0.98, 0.0005), 4)
x3 <- (x3-mean(x3))/sd(x3)
x1 <- rep(0:1, c(10,10))
x1 <- (x1-mean(x1))/sd(x1)
x2 <- qnorm(seq(0.0025,0.9975, 0.00049))
x2 <- (x2-mean(x2))/sd(x2)
x3 <- qchisq(seq(0.01,0.98, 0.0005), 4)
x3 <- (x3-mean(x3))/sd(x3)
drawSDs <- function(m=0,s=1){
abline(v=m, col='#00000033')
rect(m-s, -5, m+s, 500, col='#00000025', border='#00000000')
rect(m+s, -5, m+2*s, 500, col='#00000015', border='#00000000')
rect(m-s, -5, m-2*s, 500, col='#00000015', border='#00000000')
rect(m+2*s, -5, m+3*s, 500, col='#0000000B', border='#00000000')
rect(m-2*s, -5, m-3*s, 500, col='#0000000B', border='#00000000')
rect(m+4*s, -5, m+3*s, 500, col='#00000008', border='#00000000')
rect(m-4*s, -5, m-3*s, 500, col='#00000008', border='#00000000')
}
x1 <- rep(0:1, c(10,10))
x1 <- (x1-mean(x1))/sd(x1)
x2 <- qnorm(seq(0.0025,0.9975, 0.00049))
x2 <- (x2-mean(x2))/sd(x2)
x3 <- qchisq(seq(0.01,0.98, 0.0005), 4)
x3 <- (x3-mean(x3))/sd(x3)
drawSDs <- function(m=0,s=1){
abline(v=m, col='#00000033')
rect(m-s, -5, m+s, 500, col='#00000025', border='#00000000')
rect(m+s, -5, m+2*s, 500, col='#00000015', border='#00000000')
rect(m-s, -5, m-2*s, 500, col='#00000015', border='#00000000')
rect(m+2*s, -5, m+3*s, 500, col='#0000000B', border='#00000000')
rect(m-2*s, -5, m-3*s, 500, col='#0000000B', border='#00000000')
rect(m+4*s, -5, m+3*s, 500, col='#00000008', border='#00000000')
rect(m-4*s, -5, m-3*s, 500, col='#00000008', border='#00000000')
}
xR <- c(-1,1)*max(c(x1,x2,x3))
gf_histogram(x1, breaks=c(-1.05, -0.95, 0.95, 1.05), xlim=xR, axes=FALSE, xlab='',border=TRUE, lty=1, probability=TRUE, ylim=c(0, 5.6))
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), xlim=xR, axes=FALSE, xlab='',border=TRUE, lty=1, probability=TRUE, ylim=c(0, 5.6))
drawSDs()
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), xlim=xR, axes=FALSE, xlab='',border=TRUE, lty=1, probability=TRUE, ylim=c(0, 5.6)) %>%
drawSDs()
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), xlim=xR, axes=FALSE, xlab='',border=TRUE, lty=1, probability=TRUE, ylim=c(0, 5.6))
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), add=TRUE, probability=TRUE, col=COL[1], ylim=c(0, 0.75))
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75))
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75),xlab="")
gf_histogram(~x2, breaks=25, add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75),xlab="")
gf_histogram(~x2, bins=25, add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75),xlab="")
gf_histogram(~x3, bins=25, add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75),xlab="")
?boxPlot
data(email50)
data(COL)
d   <- email50$num_char
boxPlot(d, ylab='Number of Characters (in thousands)', xlim=c(0.3,3), axes=FALSE, ylim=range(d)+sd(d)*c(-1,1)*0.2)
axis(2)
arrows(2,0, 1.35,min(d)-0.5, length=0.08)
text(2,0,'lower whisker', pos=4)
arrows(2, quantile(d, 0.25)+sd(d)/7, 1.35, quantile(d, 0.25), length=0.08)
text(2, quantile(d, 0.25)+sd(d)/6.5, expression(Q[1]~~'(first quartile)'), pos=4)
m <- median(d)
arrows(2, m+sd(d)/5, 1.35, m, length=0.08)
text(2,m+sd(d)/4.7,'median', pos=4)
q <- quantile(d, 0.75)
arrows(2, q+sd(d)/4, 1.35, q, length=0.08)
text(2,q+sd(d)/3.8,expression(Q[3]~~'(third quartile)'), pos=4)
arrows(2, rev(sort(d))[4]-sd(d)/7, 1.35, rev(sort(d))[4], length=0.08)
text(2, rev(sort(d))[4]-sd(d)/6.8,'upper whisker', pos=4)
y <- quantile(d, 0.75) + 1.5*IQR(d)
arrows(2, y-0.1*sd(d), 1.35, y, length=0.08)
lines(c(0.72,1.28), rep(y,2), lty=3, col='#00000066')
text(2,y-0.1*sd(d),'max whisker reach', pos=4)
m <- rev(tail(sort(d), 5))
s <- m[1]-0.3*sd(m)
arrows(2, s, 1.1, m[1]-0.2, length=0.08)
arrows(2, s, 1.1, m[2]+0.3, length=0.08)
arrows(2, s, 1.1, m[3]+0.35, length=0.08)
text(2,s,'suspected outliers', pos=4)
points(rep(0.4, 25), rev(sort(d))[1:25], cex=rep(1.3, 25), col=rep(COL[1,3], 25), pch=rep(1, 25))
points(rep(0.4, 25), sort(d)[1:25], cex=rep(1, 25), col=rep(COL[4,3], 25), pch=rep("-", 25))
sort(d)[25:26]
quantile(d, c(0.25, 0.5, 0.75))
tail(sort(d), 4)
boxPlot(d, ylab='', axes=FALSE, ylim=range(d)+sd(d)*c(-1,1)*0.2, xlim=c(0.5, 1.45))
axis(2, cex=1.1)
par(las=0)
mtext("Number of Characters\n(in thousands)", 2, line=2, cex=1.1)
data(email50)
data(COL)
d   <- email50$num_char
boxPlot(d, ylab='Number of Characters (in thousands)', xlim=c(0.3,3), axes=FALSE, ylim=range(d)+sd(d)*c(-1,1)*0.2)
axis(2)
arrows(2,0, 1.35,min(d)-0.5, length=0.08)
text(2,0,'lower whisker', pos=4)
arrows(2, quantile(d, 0.25)+sd(d)/7, 1.35, quantile(d, 0.25), length=0.08)
text(2, quantile(d, 0.25)+sd(d)/6.5, expression(Q[1]~~'(first quartile)'), pos=4)
m <- median(d)
arrows(2, m+sd(d)/5, 1.35, m, length=0.08)
text(2,m+sd(d)/4.7,'median', pos=4)
q <- quantile(d, 0.75)
arrows(2, q+sd(d)/4, 1.35, q, length=0.08)
text(2,q+sd(d)/3.8,expression(Q[3]~~'(third quartile)'), pos=4)
arrows(2, rev(sort(d))[4]-sd(d)/7, 1.35, rev(sort(d))[4], length=0.08)
text(2, rev(sort(d))[4]-sd(d)/6.8,'upper whisker', pos=4)
y <- quantile(d, 0.75) + 1.5*IQR(d)
arrows(2, y-0.1*sd(d), 1.35, y, length=0.08)
lines(c(0.72,1.28), rep(y,2), lty=3, col='#00000066')
text(2,y-0.1*sd(d),'max whisker reach', pos=4)
m <- rev(tail(sort(d), 5))
s <- m[1]-0.3*sd(m)
arrows(2, s, 1.1, m[1]-0.2, length=0.08)
arrows(2, s, 1.1, m[2]+0.3, length=0.08)
arrows(2, s, 1.1, m[3]+0.35, length=0.08)
text(2,s,'suspected outliers', pos=4)
points(rep(0.4, 25), rev(sort(d))[1:25], cex=rep(1.3, 25), col=rep(COL[1,3], 25), pch=rep(1, 25))
points(rep(0.4, 25), sort(d)[1:25], cex=rep(1, 25), col=rep(COL[4,3], 25), pch=rep("-", 25))
mean(~num_char,email50)
mean(num_char,email50)
mean(~num_char,email50)
talle(~num_char,data=email50)
mean(~num_char,data=email50)
mean(~num_char,data=email50)
sd(~num_char,data=email50)
mean(~num_char,data=email50)
sd(~num_char,data=email50)
quantile(~num_char,data=email50)
?quantile
mean(~num_char,data=email50)
sd(~num_char,data=email50)
quantile(~num_char,data=email50)
iqr(~num_char,data=email50)
fav_stats(~num_char,data=email50)
favstats(~num_char,data=email50)
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
dotPlot(p1, at=3, xlab='Number of Characters (in thousands)', ylab='', pch=20, col=COL[1,3], cex=1, ylim=c(0.5,3.5), xlim=c(-3.5e1,151), axes=FALSE)
axis(1, at=seq(0,150,50), cex.axis=0.8)
dotPlot(p1, at=3, xlab='Number of Characters (in thousands)', ylab='', pch=20, col=COL[1,3], cex=1, ylim=c(0.5,3.5), xlim=c(-3.5e1,151), axes=FALSE)
?dotPlot
cbind(p1,p2,p3)
rbind(p1,p2,p3)
c(p1,p2,p3)
robust
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
robust
gf_boxplot(value~group,data=robust)
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
gf_boxplot(value~group,data=robust,ylab="Number of Characters (in thousands)",xlab="Data Group")
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
gf_boxplot(value~group,data=robust,ylab="Number of Characters (in thousands)",xlab="Data Group")
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
gf_boxplot(value~group,data=robust,ylab="Number of Characters (in thousands)",xlab="Data Group") %>%
gf_theme(theme_classic())
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
favstats(value~group,data=robust)
gf_histogram(salary/1000,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
MLB
gf_histogram(~salary,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", bins=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", bins=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1]) %>%
gf_theme(theme_classic())
gf_histogram(~log(salary/1000), data=MLB , bins=15, xlab=expression(log[e]*"(Salary), where Salary is in millions USD"), ylab="", fill=COL[1])
gf_histogram(~log(salary/1000), data=MLB , bins=15, xlab=expression(log[e]*"(Salary), where Salary is in millions USD"), ylab="", fill=COL[1]) %>%
gf_theme(theme_classic())
data(COL)
plot(log(email50$num_char), log(email50$line_breaks), pch=19, cex=1.3, col=COL[1,4], xlab="", ylab="Number of Lines", axes=FALSE)
axis(2)
axis(1)
box()
points(log(email50$num_char), log(email50$line_breaks), cex=1.3, col=COL[1,1])
mtext("Number of Characters (in thousands)", 1, 1.9)
names(county)
install.packages("maps")
install.packages("usmap")
library(tidyverse)
library(mosaic)
library(openintro)
library(maps)
map_data("state")
county
map_data("county")
names(countyComplete)
head(countyComplete)
county
head(countyComplete)
map("county")
map_data("county")
?text
?boxPlot
