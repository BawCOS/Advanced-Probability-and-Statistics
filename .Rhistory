count(suit)
results %>%
count(suit) %>%
mutate(prob=n/sum(n))
Cards %>%
filter(rank %in% c(10, "J", "Q", "K", "A")) %>%
select(rank,suit)
results <- do(10000)*sample(Cards,1)
head(results)
results %>%
filter(rank %in% c(10, "J", "Q", "K", "A")) %>%
summarize(prob=n()/10000)
results %>%
mutate(face=rank %in% c(10, "J", "Q", "K", "A"))%>%
summarize(prob=mean(face))
Cards %>%
filter(rank %in% c(10, "J", "Q", "K", "A"),suit=="Club") %>%
select(rank,suit)
results %>%
mutate(face=(rank %in% c(10, "J", "Q", "K", "A"))&(suit=="Club"))%>%
summarize(prob=mean(face))
1-(364/365)^20
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(tidyverse)
n<-1:80
mybday<-function(x) 1-(364/365)^x
mybday <- Vectorize(mybday)
mybday(20)
gf_line(mybday(n)~ n,
xlab="Number of People",
ylab="Probability of Match",
title="Probability of at least 1 person matching my birthday")
prob <- mybday(1:300)
n<-1:300
which(prob>= .5)
n<-1:80
mybday<-function(x) 1-(364/365)^x
mybday <- Vectorize(mybday)
mybday(20)
n<-1:300
mybday<-function(x) 1-(364/365)^x
mybday <- Vectorize(mybday)
mybday(20)
gf_line(mybday(n)~ n,
xlab="Number of People",
ylab="Probability of Match",
title="Probability of at least 1 person matching my birthday")
prob <- mybday(n)
which(prob>= .5)
30*10/(6^5)
choose(13,2)*choose(4,2)*choose(4,2)*choose(44,1)
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(tidyverse)
set.seed(1154)
data.frame(do(500000)*rflip(3)) %>%
filter(heads==3) %>%
summarise(count=n()) %>%
pull()
set.seed(1154)
data.frame(do(50000)*rflip(3)) %>%
filter(heads==3) %>%
summarise(count=n()) %>%
pull()
data.frame(do(50000)*rflip(3,prob=0.8)) %>%
filter(heads==3) %>%
summarise(count=n()) %>%
pull()
6157/(6157 + 25743)
set.seed(501)
results <- rflip(100000,summarize = TRUE)
results
data.frame(do(50226)*rflip(3)) %>%
filter(heads==3) %>%
summarise(count=n()) %>%
pull()
data.frame(do(49774)*rflip(3,prob=0.8)) %>%
filter(heads==3) %>%
summarise(count=n()) %>%
pull()
6270/(6270+25512)
set.seed(9021)
results <- rflip(100000,prob=.75,summarize = TRUE)
results
data.frame(do(75023)*rflip(3)) %>%
filter(heads==3) %>%
summarise(count=n()) %>%
pull()
100000-75023
data.frame(do(24977)*rflip(3,prob=0.8)) %>%
filter(heads==3) %>%
summarise(count=n()) %>%
pull()
9579/(9579+12789)
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(tidyverse)
y<-c(0,1,2,3,4,5)
sum(y*c(6,10,8,6,4,2)/36)
y<-c(0,1,2,3,4,5)
mean_y<-sum(y*c(6,10,8,6,4,2)/36)
mean_y
(y-mean_y)^2
(y-mean_y)^2*c(6,10,8,6,4,2)/36)
(y-mean_y)^2*(c(6,10,8,6,4,2)/36)
sum((y-mean_y)^2*(c(6,10,8,6,4,2)/36))
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(tidyverse)
results<-do(10)*sample(1:6,1,replace=TRUE)
results
set.seed(61)
sample(1:6,4,replace=TRUE)
results<-do(10000)*sample(1:6,1,replace=TRUE)
tally(~sample,data=results,format="percent")
mean(~sample,data=results)
var(~sample,data=results)
var(~sample,data=results)*(10000-1)/10000
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(tidyverse)
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain)
my_pdf <- function(x)integrate(function(y)y^2/18,-x,x)$value
my_pdf<-Vectorize(my_pdf)
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain)
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain) %>%
gf_theme(theme_classic())
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Problem 1 pdf")
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Problem 1 pdf",x="",y="pdf")
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Unscaled pdf",x="",y="Unscaled pdf")
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Pdf for different values of k",x="k",y="Unscaled pdf")
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Pdf for different values of k",x="k",y="Cummulative Probability") %>%
gf_hline(yintercept = 1,color = "blue")
x<-seq(-3,3,0.001)
fx<-x^2
gf_line(fx~x,ylab="f(x)",main="pdf of X")
x<-seq(-3,3,0.001)
fx<-x^2
gf_line(fx~x,ylab="f(x)",title="pdf of X")
x<-seq(-3,3,0.001)
fx<-x^2
gf_line(fx~x,ylab="f(x)",title="pdf of X") %>%
gf_theme(theme_classic())
ggplot(data.frame(x=c(-3, 3)), aes(x)) +
stat_function(fun=function(x) x^2/18)
ggplot(data.frame(x=c(-3, 3)), aes(x)) +
stat_function(fun=function(x) x^2/18) +
theme_classic()
ggplot(data.frame(x=c(-3, 3)), aes(x)) +
stat_function(fun=function(x) x^2/18) +
theme_classic() +
labs(y="f(x)")
ggplot(data.frame(x=c(-3, 3)), aes(x)) +
stat_function(fun=function(x) x^2/18) +
theme_classic() +
labs(y="f(x)",title="pdf of X")
curve(x^2/18,from=-3,to=3,ylab="f(x)",main="pdf of X")
domain <- seq(.01,5,.1)
gf_line(my_pdf(domain)~domain) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Cumulative probability for different values of k",x="k",y="Cummulative Probability") %>%
gf_hline(yintercept = 1,color = "blue")
x<-seq(-3.5,3.5,0.001)
fx<-pmin(1,(1*(x>=-3)*(x^3/54+1/2)))
gf_line(fx~x,ylab="F(x)",main="cdf of X")
x<-seq(-3.5,3.5,0.001)
fx<-pmin(1,(1*(x>=-3)*(x^3/54+1/2)))
gf_line(fx~x,ylab="F(x)",main="cdf of X") %>%
gf_labs(title="Cdf of X",x="x",y="F(x)") %>%
gf_theme(theme_classic())
curve(x^2/18,from=-3,to=3,ylab="f(x)",main="pdf of X")
t<-seq(2.21,3,0.001)
polygon(c(2.21,t,3),c(0,t^2/18,0),density=15)
polygon(c(-2.21,-t,-3),c(0,t^2/18,0),density=15)
text(-2.3,0.4,"0.3")
text(2.3,0.4,"0.3")
results %>%
gf_dens(~cuberoot,title="pdf",x="") %>%
gf_theme(theme_classic())
cuberoot <- function(x) {
sign(x) * abs(x)^(1/3)}
set.seed(4)
results <- do(10000)*cuberoot((runif(1)-.5)*54)
results %>%
gf_dens(~cuberoot,title="pdf",x="") %>%
gf_theme(theme_classic())
cuberoot <- function(x) {
sign(x) * abs(x)^(1/3)}
set.seed(4)
results <- do(10000)*cuberoot((runif(1)-.5)*54)
results %>%
gf_dens(~cuberoot,title="pdf",x="") %>%
gf_theme(theme_classic())
results %>%
gf_dens(~cuberoot) %>%
gf_theme(theme_classic())
results %>%
gf_dens(~cuberoot) %>%
gf_theme(theme_classic()) %>%
gf_labs((title="pdf from simulation",x"x",y="f(x)"))
results %>%
gf_dens(~cuberoot) %>%
gf_theme(theme_classic()) %>%
gf_labs((title="pdf from simulation",x="x",y="f(x)"))
results %>%
gf_dens(~cuberoot) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="pdf from simulation",x="x",y="f(x)")
?gf_dens
results %>%
gf_dens(~cuberoot,xlim=c(-3,3)) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="pdf from simulation",x="x",y="f(x)")
gf_refine
?gf_refine
results %>%
gf_dens(~cuberoot) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="pdf from simulation",x="x",y="f(x)") %>%
gf_refine(xlim=c(-3,3))
results %>%
gf_dens(~cuberoot) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="pdf from simulation",x="x",y="f(x)")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.pos='ht')
library(mosaic)
library(tidyverse)
gf_dist("unif") %>%
gf_theme(theme_classic())
gf_dist("unif",title="Pdf of Uniform random variable") %>%
gf_theme(theme_classic())
gf_dist("unif",title="Pdf of Uniform random variable",y="f(x)") %>%
gf_theme(theme_classic())
gf_dist("unif",title="Pdf of Uniform random variable",ylab="f(x)") %>%
gf_theme(theme_classic())
integrate(function(x)dunif(x),0,1)
gf_dist("exp") %>%
gf_theme(theme_classic())
##median
qexp(0.5,1/3)
##95th percentile
qexp(0.95,1/3)
log(.5)
log(.5)*3
Gamma(1)
gamma(1)
gamma(2)
gamma(3)
gamma(4)
?gamma
?rweibull
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(tidyverse)
mean(rexp(10000,2/3) >=10)
set.seed(616)
mean(rpois(10000,40/6) == 0)
mean(rexp(10000,2/3) >=10)
set.seed(616)
mean(rpois(100000,40/6) == 0)
mean(rexp(100000,2/3) >=10)
1-pexp(10,2/3)
?rgamma
qgamma(c(0.025,0.975),40,2)
qgamma(.95,40,2)
qnorm(0.9,330,50)
qnorm(0.9,330,50)
rulethumb<-function(mu,sd){
pnorm(mu+c(1,2,3)*sd,mu,sd)-pnorm(mu-c(1,2,3)*sd,mu,sd)
}
rulethumb(15,12)
rulethumb(0,1)
365^100
364/365
(364/365)^98
(364/365)^98/365^2
(364/365)^58/365^2
(364/365)^8/365^2
choose(100,2)*(364/365)^98/365^2
choose(50,2)*(364/365)^48/365^2
days
sample(days,size=100,replace = TRUE)
which(sample(days,size=100,replace = TRUE)==1)
which(sample(days,size=100,replace = TRUE)==1)
length(which(sample(days,size=100,replace = TRUE)==1)==2)
length(which(sample(days,size=100,replace = TRUE)==1)==2)
length(which(sample(days,size=100,replace = TRUE)==1)==2)
do(1000)*length(which(sample(days,size=100,replace = TRUE)==1)==2)
library(mosaic)
do(1000)*length(which(sample(days,size=100,replace = TRUE)==1)==2)
results<-do(10000)*length(which(sample(days,size=100,replace = TRUE)==1)==2)
mean(~length,data=results)
results<-do(10000)*length(which(sample(days,size=100,replace = TRUE)==1)==2)
mean(~length,data=results)
sample(days,size=100,replace = TRUE)
sort(sample(days,size=100,replace = TRUE))
sort(sample(days,size=100,replace = TRUE))
sort(sample(days,size=100,replace = TRUE))
sort(sample(days,size=100,replace = TRUE))
sort(sample(days,size=100,replace = TRUE))
temp<-sort(sample(days,size=100,replace = TRUE))
temp
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
length(which(temp==1))
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp<-sort(sample(days,size=100,replace = TRUE))
which(temp==1)
temp
temp[1]<-1
which(temp==1)
temp[2]<-1
which(temp==1)
length(which(temp==1))
choose(100,2)*(364/365)^98/365^2
results<-do(10000)*(length(which(sample(days,size=100,replace = TRUE)==1))==2)
mean(~length,data=results)
head(results)
mean(results$result)
mean(~result,data=results)
qnorm(0.05,335,72)
pnorm(216,335,72)
pnorm(216,335,72)+90
qnorm(pnorm(216,335,72)+90,335,72)
qnorm((pnorm(216,335,72)+90),335,72)
qnorm(90.05,335,72)
qnorm(90.05,335,72)
qnorm(pnorm(216,335,72)+.9,335,72)
install.packages("VennDiagram")
venn.plot <- draw.single.venn(100, "First");
grid.draw(venn.plot);
grid.newpage();
library(VennDiagram)
venn.plot <- draw.single.venn(100, "First");
grid.draw(venn.plot);
grid.newpage();
draw.pairwise.venn(100, 70, 30, c("First", "Second"))
ree-set diagram
venn.plot <- draw.triple.venn(65, 75, 85,
35, 15, 25, 5, c("First", "Second", "Third"))
draw.triple.venn(65, 75, 85,
35, 15, 25, 5, c("First", "Second", "Third"))
draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 2,
cat.col = c("blue", "red", "green")
)
draw.triple.venn(20, 40, 60, 0, 0, 0, 0,
c("First", "Second", "Third"), sep.dist = 0.1, rotation.degree = 30)
draw.triple.venn(20, 40, 60, 0, 0, 0, 0,
c("First", "Second", "Third"), sep.dist = 0.1, rotation.degree = 30)
draw.triple.venn(
area1 = 65,
area2 = 75,
area3 = 85,
n12 = 35,
n23 = 15,
n13 = 25,
n123 = 5,
category = c("First", "Second", "Third"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 2,
cat.col = c("blue", "red", "green")
)
knitr::opts_chunk$set(echo = TRUE)
library(cubature) # load the package "cubature"
f <- function(x) { (x[1] + x[2]) } # "x" is vector
adaptIntegrate(f, lowerLimit = c(0, 0), upperLimit = c(1, 1))
f2 <- function(x) { (2*x[1]^2 + x[1]) } # "x" is vector
adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(0.2))
2*.2^2
2*.2^2+.2
(2*.2^2+.2)/3
f2 <- function(x) { (2*x[1]^2 + x[1])/3 } # "x" is vector
adaptIntegrate(f2, lowerLimit = c(0), upperLimit = c(0.2))
1/210
