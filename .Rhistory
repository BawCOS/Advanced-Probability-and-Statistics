gf_theme(theme_classic())
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
favstats(value~group,data=robust)
gf_histogram(salary/1000,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
MLB
gf_histogram(~salary,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", bins=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", bins=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1]) %>%
gf_theme(theme_classic())
gf_histogram(~log(salary/1000), data=MLB , bins=15, xlab=expression(log[e]*"(Salary), where Salary is in millions USD"), ylab="", fill=COL[1])
gf_histogram(~log(salary/1000), data=MLB , bins=15, xlab=expression(log[e]*"(Salary), where Salary is in millions USD"), ylab="", fill=COL[1]) %>%
gf_theme(theme_classic())
data(COL)
plot(log(email50$num_char), log(email50$line_breaks), pch=19, cex=1.3, col=COL[1,4], xlab="", ylab="Number of Lines", axes=FALSE)
axis(2)
axis(1)
box()
points(log(email50$num_char), log(email50$line_breaks), cex=1.3, col=COL[1,1])
mtext("Number of Characters (in thousands)", 1, 1.9)
names(county)
install.packages("maps")
install.packages("usmap")
library(tidyverse)
library(mosaic)
library(openintro)
library(maps)
map_data("state")
county
map_data("county")
names(countyComplete)
head(countyComplete)
county
head(countyComplete)
map("county")
map_data("county")
?text
?boxPlot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(openintro)
tally(~spam,data=email)
names(email)
tally(number~spam,data=email)
tally(spam~number,data=email)
tally(spam~number,data=email,margins = TRUE)
tally(~spam+number,data=email,margins = TRUE)
glimpse(email)
factor(email$spam,levels=c("spam","not spam"))
factor(email$spam)
as.factor(email$spam,levels=c("spam","not spam"))
?factor
as.factor(email$spam,labels=c("spam","not spam"))
factor(email$spam,levels=c(1,0),labels=c("spam","not spam"))
email <- email %>%
mutate(spam = factor(email$spam,levels=c(1,0),labels=c("spam","not spam")))
tally(~spam+number,data=email,margins = TRUE)
tally(~spam+number,data=email,margins = TRUE)
?email
library(openintro)
inspect(email)
library(openintro)
email %>%
select(spam,number) %>%
inspect()
data(email)
library(openintro)
email %>%
select(spam,number) %>%
inspect()
email <- email %>%
mutate(spam = factor(email$spam,levels=c(1,0),labels=c("spam","not spam")))
email %>%
select(spam,number) %>%
inspect()
tally(~spam+number,data=email,margins = TRUE)
tally(~number,data=email)
tally(~number,data=email,format='proportions')
tally(~number,data=email,format='proportion')
?tally
tally(~number,data=email,format='percent')
round(tally(~number,data=email,format='percent'),2)
round(tally(~number,data=email,format='percent'),3)
round(tally(~number,data=email,format='percent'),2)
email %>%
gf_bar(~number)
email %>%
gf_bar(~number)
email %>%
gf_props(~number)
email %>%
gf_bar(~number)
email %>%
gf_props(~number)
email %>%
gf_props(~number,title="The proportions of emails with a number in it")
email %>%
gf_props(~number,title="The proportions of emails with a number in it",subtitle="From 2012",x="",y="Proportion of emails")
?gf_props
email %>%
gf_props(~number,title="The proportions of emails with a number in it",subtitle="From 2012",xlab="",ylab="Proportion of emails")
email %>%
gf_props(~number,title="The proportions of emails with a number in it",subtitle="From 2012",xlab="Type of number in the email",ylab="Proportion of emails")
email %>%
gf_props(~number,title="The proportions of emails with a number in it",subtitle="From 2012",xlab="Type of number in the email",ylab="Proportion of emails") %>%
gf_theme(theme_bw())
?tally
tally(spam~number,data=email,margins = TRUE,format='proportion')
tally
mosaic::tally
149/549
tally(number~spam,data=email,margins = TRUE,format='proportion')
?geom_mosaic
names(email)
inspect(email)
names(countyComplete)
install.packages("socviz")
library(socviz)
names(county_data)
head(county_data)
?left_join
tally(spam~format,data=email,margins = TRUE,format='proportion')
tally(spam~format,data=email,margins = TRUE)
email <- email %>%
mutate(format = factor(email$format,levels=c(1,0),labels=c("HTML","text")))
tally(spam~format,data=email,margins = TRUE)
tally(spam~format,data=email,margins = TRUE,format="proportion")
tally(spam~number,email,format='proportion',margin=TRUE)
tally(number~spam,email,format='proportion',margin=TRUE)
email %>%
gf_props(spam~number)
email %>%
gf_props(~number)
email %>%
gf_props(~number,fill=~spam)
email %>%
gf_props(~number,fill=~spam,position='fill')
email %>%
gf_bar(~number,fill=~spam,position='fill')
email %>%
gf_bar(~number,fill=~spam,position='fill')
email %>%
gf_bar(~number,fill=~spam)
install.packages("vcdExtra")
library(vcd)
mosaic(~number,data=email)
mosaic(number~,data=email)
?mosaic
mosaic(number,data=email)
mosaic(email$number)
mosaic(number,data=email)
mosaic(number~1,data=email)
mosaic(~number,data=email)
mosaic(~number,data=email)
mosaic(spam~number,data=email)
mosaic(spam~number,data=email,shade=TRUE)
mosaic(~spam+number,data=email,shade=TRUE)
mosaic(~spam+number,data=email)
mosaic(spam~number,data=email)
mosaic(spam~number,data=email,legend=TRUE)
mosaic(spam~number,data=email)
mosaic(number~spam,data=email)
mosaic(~number,data=email)
mosaic(~number+spam,data=email)
mosaic(~spam+number,data=email)
mosaic(spam~number,data=email)
mosaic(~spam+number,data=email)
tally(~spam+number,data=email)
tally(~spam+number,data=email,format='proportion')
tally(spam~number,data=email,format='proportion')
tally(~spam+number,data=email,format='proportion')
tally(~number+spam,data=email,format='proportion')
mosaic(~number+spam,data=email)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(openintro)
library(tidyverse)
library(mosaic)
library(openintro)
library(vcd)
library(vcdExtra)
library(vcd)
as.data.frame(xtabs(~ Treatment + Sex + Improved, data = Arthritis))
mosaic(~spam+number,data=email)
tally(spam~number,data=email)
tally(number~spam,data=email)
tally(number~spam,data=email,margins = TRUE)
tally(number~spam,data=email,margins = TRUE,format="proportion")
mosaic(~spam+number,data=email)
mosaic(spam~number,data=email)
mosaic(spam~number,data=email)
mosaic(~spam+number,data=email)
tally(~spam,data=email,margins = TRUE,format="proportion")
tally(~spam,data=email,format="proportion")
pie(table(email$number), col=COL[c(3,1,2)], radius=0.75)
pie(table(email$number), col=COL[c(3,1,2)], radius=0.75)
countyComplete %>%
summary()
countyComplete %>%
inspect()
countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
inspect()
?sign
cc_reduced <- countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
cc_reduced %>%
tally(~pop_gain)
cc_reduced %>%
inspect(pop_gain)
cc_reduced <- countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
cc_reduced %>%
head()
cc_reduced %>%
tally(~pop_gain)
cc_reduced %>%
tally(pop_gain)
dim(cc_reduced)
table(cc_reduced$pop_gain)
cc_reduced <- countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000-.5))
table(cc_reduced$pop_gain)
head(cc_reduced)
?tally
cc_reduced %>%
mosaic::tally(~pop_gain)
cc_reduced %>%
tally(~factor(pop_gain))
cc_reduced %>%
tally(~as.factor(pop_gain))
class(cc_reduced)
class(cc_reduced$pop_gain)
data(email)
tally(~spam+number,data=email,margins = TRUE)
email %>%
select(spam,number) %>%
inspect()
cc_reduced %>%
tally(pop_gain)
?tally
library(tidyverse)
library(vcd)
library(vcdExtra)
library(openintro)
library(mosaic)
cc_reduced %>%
tally(pop_gain)
cc_reduced %>%
tally(~pop_gain)
summary(cc_reduced$pop_gain)
dim(cc_reduced)
cc_reduced %>%
tally(~pop_gain,na.rm=TRUE)
cc_reduced %>%
tally(pop_gain,na.rm=TRUE)
cc_reduced %>%
drop_na(pop_gain) %>%
tally(~pop_gain)
cc_reduced <- countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
table(cc_reduced$pop_gain)
sum(table(cc_reduced$pop_gain))
dim(cc_reduced)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
dim(cc_reduced)
cc_reduced %>%
tally(~pop_gain)
table(cc_reduced$pop_gain)
class(cc_reduced$pop_gain)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = factor(sign(pop2010-pop2000)))
summary(cc_reduced)
cc_reduced %>%
tally(~pop_gain)
cc_reduced %>%
tally(pop_gain)
library(openintro)
library(mosaic)
knitr::opts_chunk$set(echo = TRUE)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = factor(sign(pop2010-pop2000)))
library(dplyr)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = factor(sign(pop2010-pop2000)))
help(drop_na)
library(tidyr)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = factor(sign(pop2010-pop2000)))
cc_reduced %>%
tally(~pop_gain)
tally(~spam+number,data=email,margins = TRUE)
cc_reduced %>%
tally(~pop_gain,data=.)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
tally(~pop_gain,data=cc_reduced)
cc_reduced <- cc_reduced %>%
filter(pop_gain != 0) %>%
mutate(pop_gain = factor(pop_gain))
tally(~pop_gain,data=cc_reduced)
inspect(cc_reduced)
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
cc_reduced <- cc_reduced %>%
filter(pop_gain != 0) %>%
mutate(pop_gain = factor(pop_gain,levels=c(-1,1),labels=c("Loss","Gain")))
inspect(cc_reduced)
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain)
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain,subtitle="The income data were collected between 2006 and 2010.")
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain,subtitle="The income data were collected between 2006 and 2010.",xlab="Population change from 2000 to 2010")
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain,
subtitle="The income data were collected between 2006 and 2010.",
xlab="Population change from 2000 to 2010",
ylab="Median Household Income")
cc_reduced %>%
gf_density(~median_household_income,color=~pop_gain)
cc_reduced %>%
gf_dens(~median_household_income,color=~pop_gain)
?gf_dens
cc_reduced %>%
gf_dens(~median_household_income,color=~pop_gain,lwd=2)
cc_reduced %>%
gf_dens(~median_household_income,color=~pop_gain,lwd=1)
library(openintro)
mammals
favstat(mammals)
favstats(mammals)
inspect(mammals)
library(mosaic)
inspect(mammals)
?mammals
gf_histogram(~TotalSleep,data=mammals)
gf_boxplot(~TotalSleep,data=mammals)
gf_dens(~TotalSleep,data=mammals)
gf_dens(~BrainWt,data=mammals)
gf_dens(~BodyWt,data=mammals)
gf_histogram(~BodyWt,data=mammals)
gf_boxplot(~BodyWt,data=mammals)
gf_boxplot(~TotalSleep,data=mammals)
gf_dens(~TotalSleep,data=mammals)
gf_dens(~LifeSpan,data=mammals)
gf_boxplot(~LifeSpan,data=mammals)
favstats(LifeSpan~Danger,data=mammals)
gf_boxplot(LifeSpan~Exposure,data=mammals)
gf_boxplot(LifeSpan~factor(Exposure),data=mammals)
favstats(LifeSpan~Exposure,data=mammals)
gf_dens(LifeSpan~factor(Exposure),data=mammals)
gf_dens(~LifeSpan,color=factor(Exposure),data=mammals)
gf_dens(~LifeSpan,color=factor(~Exposure),data=mammals)
gf_dens(~LifeSpan,data=mammals)
gf_dens(~LifeSpan,group=factor(Exposrue),data=mammals)
gf_dens(~LifeSpan,group=factor(Exposure),data=mammals)
gf_dens(~LifeSpan,group=~factor(Exposure),data=mammals)
gf_dens(~LifeSpan,color=~factor(Exposure),data=mammals)
knitr::opts_chunk$set(echo = TRUE)
gf_dens(~TotalSleep,data=mammals)
gf_boxplot(~LifeSpan,data=mammals)
mean(~LifeSpan,data=mammals)
mean(~LifeSpan,data=mammals,na.rm=TRUE)
median(~LifeSpan,data=mammals,na.rm=TRUE)
favstats(LifeSpan~Danger,data=mammals)
mammals %>%
gf_boxplot(LifeSpan~Exposure)
mammals %>%
gf_boxplot(LifeSpan~factor(Exposure))
favstats(LifeSpan~factor(Exposure),data=mammals)
gf_dens(~LifeSpan,color=~factor(Exposure),data=mammals)
gf_dens(~LifeSpan,color=~factor(Exposure),data=mammals)
gf_dens(~LifeSpan,color=~factor(Exposure),data=mammals)
mammals %>%
mutate(Exposed=ifelse((Exposure==1)|(Exposure==2),"Low","High"))
mammals %>%
mutate(Exposed=factor(ifelse((Exposure==1)|(Exposure==2),"Low","High")))
mammals <- mammals %>%
mutate(Exposed=factor(ifelse((Exposure==1)|(Exposure==2),"Low","High")))
inspect(mammals)
gf_dens(~LifeSpan,color=~Exposed,data=mammals)
mammals %>%
gf_point(LifeSpan~Gestation)
mammals %>%
gf_point(Gestation~LifeSpan)
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
library(mosaic)
library(tidyverse)
pbirthday(18)
head(births)
library(mosaic)
head(Births)
dim(Births)
?Births
Briths %>%
group_by(day_of_year) %>%
summarise(n=n(births))
Births %>%
group_by(day_of_year) %>%
summarise(n=n(births))
Births %>%
group_by(day_of_year) %>%
summarise(n=sum(births))
knitr::opts_chunk$set(echo = TRUE)
Births %>%
group_by(year) %>%
summarise(n=sum(day_of_year))
Births %>%
group_by(year) %>%
summarise(n=n(day_of_year))
Births %>%
group_by(year) %>%
summarise(n=n())
seq( as.Date("2005-01-01"), as.Date("2005-12-31"), by="+1 day")
as.character(seq( as.Date("2005-01-01"), as.Date("2005-12-31"), by="+1 day"),format="%B %Y")
as.character(seq( as.Date("2005-01-01"), as.Date("2005-12-31"), by="+1 day"),format="%B %d")
as.character(seq( as.Date("2005-01-01"), as.Date("2005-12-31"), by=365),format="%B %d")
as.character(seq( as.Date("2005-01-01"), as.Date("2005-12-31"), by=1),format="%B %d")
1:365
seq(1,365)
?sample
days <- seq(1,365)
set.seed(2022)
sample(days,1)
class <- sample(days,size=18,replace = TRUE)
class <- sample(days,size=18,replace = TRUE)
class
set.seed(2022)
sample(days,1)
class <- sample(days,size=18,replace = TRUE)
class
sort(class)
library(mosaie)
library(mosaic)
sort(class)
unique(class)
length(unique(class))
length(unique(sample(days,size=18,replace = TRUE)))
library(mosaic)
do(5)*length(unique(sample(days,size=18,replace = TRUE)))
do(1000)*length(unique(sample(days,size=18,replace = TRUE))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
class(do(5)*length(unique(sample(days,size=18,replace = TRUE))))
do(5)*length(unique(sample(days,size=18,replace = TRUE)))
temp <- do(1000)*length(unique(sample(days,size=18,replace = TRUE)))
temp %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(10000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(10000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
mutate(match=if_else(length==18,0,1)) %>%
summarise(prob=mean(match))
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
tally(~length,data=.)
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
tally(~length,data=.) %>%
gf_bar(~length)
(do(1000)*length(unique(sample(days,size=18,replace = TRUE)))) %>%
gf_bar(~length)
