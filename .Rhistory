inherit + password + format + re_subj, family = "binomial",
data = resample(email))
head(results)
results %>%
gf_histogram(~inherit)
cdata(~inherit,data=results)
str(email)
email_mod <- glm(spam=="spam"~to_multiple,data=email,family="binomial")
summary(email_mod)
email_mod2 <- glm(spam=="spam"~.,data=email,family="binomial")
summary(email_mod2)
email_mod2 <- glm(spam=="spam"~to_multiple+cc+attach+dollar+winner+inherit+password+format+re_subj,
data=email,family="binomial")
summary(email_mod2)
email_mod2 <- glm(spam=="spam"~to_multiple+attach+dollar+winner+inherit+password+format+re_subj,
data=email,family="binomial")
summary(email_mod2)
confint(email_mod)
do(1)*glm(formula = spam=="spam" ~ to_multiple, family = "binomial", data = resample(email))
set.seed(5011)
results <- do(1000)*glm(formula = spam=="spam" ~ to_multiple, family = "binomial", data = resample(email))
head(results)
results %>%
gf_histogram(~to_multiple) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Bootstrap sampling distribtuion",
x="to_multiple paramater estimate")
cdata(~to_multiple,data=results)
do(1)*glm(formula = spam=="spam" ~ to_multiple + attach + dollar + winner +
inherit + password + format + re_subj, family = "binomial",
data = email)
set.seed(54321)
results <-do(1000)*glm(formula = spam=="spam" ~ to_multiple + attach + dollar + winner +
inherit + password + format + re_subj, family = "binomial",
data = resample(email))
head(results)
results %>%
gf_histogram(~inherit)
cdata(~inherit,data=results)
augment(email_mod2)
augment(email_mod2) %>%
mutate(p_hat=exp(.fitted)/(1+exp(.fitted)),spam_num=as.numeric(spam)-1) %>%
gf_point(spam_num~p_hat,alpha=.2) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Predicted propabailites of Spam",x="Predicted Probabilities",
y="Spam") %>%
gf_lm()
augment(email_mod2) %>%
mutate(p_hat=exp(.fitted)/(1+exp(.fitted)),spam_num=as.numeric(`spam == "spam"`)) %>%
gf_point(spam_num~p_hat,alpha=.2) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Predicted propabailites of Spam",x="Predicted Probabilities",
y="Spam") %>%
gf_lm()
augment(email_mod2) %>%
mutate(p_hat=exp(.fitted)/(1+exp(.fitted)),spam_num=spam_num=as.numeric(`spam == "spam"`)) %>%
augment(email_mod2) %>%
mutate(p_hat=exp(.fitted)/(1+exp(.fitted)),spam_num=as.numeric(`spam == "spam"`)) %>%
gf_point((spam_num+noise)~p_hat,alpha=.2) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Predicted propabailites of Spam", subtitle="Jitter for spam condition",
x="Predicted Probabilities",
y="Spam")
possum_mod <- glm(pop=="Vic"~.,data=possum,family="binomial")
summary(possum_mod)
confint(possum_mod)
possum_mod_red <- glm(pop=="Vic"~sex+skull_w+total_l+tail_l,data=possum,family="binomial")
summary(possum_mod_red)
names(poosum)
names(possum)
pairs(possum[,3:6])
pairs(possum[,3:6],diag.panel = hist)
pairs(possum[,3:6],diag.panel = panel.hist)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(possum[,3:6],diag.panel = panel.cor)
pairs(possum[,3:6],lower.panel = panel.smooth)
pairs(possum[,3:6],lower.panel = panel.smooth)
pairs(possum[,3:6],lower.panel = panel.smooth)
confint(possum_mod)
possum_mod_red <- glm(pop=="Vic"~sex+skull_w+total_l+tail_l,data=possum,family="binomial")
summary(possum_mod_red)
resample
star_mod
class(star_mod)
resample.lm
summary
summary(star_mod)
summary(starbucks)
star_mod$residuals
set.seed(952)
results<-do(1000)*glm(pop=="Vic"~.,data=resample(possum,groups=pop),family="binomial")
head(results)
confint(results)
set.seed(952)
results<-do(1000)*glm(pop=="Vic"~.,data=resample(possum),family="binomial")
head(results)
confint(results)
confint(possum_mod)
head(possum)
predict(possum_mod_red,newdata = data.frame(sex="m",skull_w=63,tail_l=37,total_l=83))
predict(possum_mod_red,newdata = data.frame(sex="m",skull_w=63,tail_l=37,total_l=83),
type="response")
predict(possum_mod_red)
names(predict(possum_mod_red))
names(predict(possum_mod_red),se.fit=TRUE)
names(predict(possum_mod_red),fit=TRUE)
names(predict(possum_mod_red,fit=TRUE))
predict(possum_mod_red,fit=TRUE)
predict(possum_mod_red,fit=TRUE,se.fit=TRUE)
predict(possum_mod_red,newdata = data.frame(sex="m",skull_w=63,tail_l=37,total_l=83),
type="response",se.fit = TRUE)
0.0062+c(-1,1)*1.96*.008
restNYC <- read.csv("https://assets.datacamp.com/production/course_3623/datasets/restNYC.csv")
head(restNYC)
dim(restNYC)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(out.width = "75%")
library(openintro)
library(knitr)
library(mosaic)
library(tidyverse)
restNYC
write_csv(restNYC,"data/restNYC.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(out.width = "75%")
library(openintro)
library(knitr)
library(mosaic)
library(tidyverse)
library(openintro)
data(COL)
p  <- seq(0.0001, 0.9999, 0.0002)
lp <- log(p/(1-p))
pts  <- seq(0.01, 0.99, length.out=25)
R    <- c(-6,6)
adj  <- 0.07
adj1 <- 0.02
plot(lp, p, ylab="", xlab=expression(logit(p[i])), xlim=c(-5.8, 6.5), ylim=c(-0.05, 1.1), type="n")
lines(lp, p, type="l", col=COL[5], lwd=1.5)
mtext(expression(p[i]), 2, 2.4)
abline(h=0:1, lty=2, col=COL[1], lwd=1.5)
this <- which.min(abs(p-0.2))
#lines(rep(p[this], 2), c(-50, lp[this]), col="#00000044")#, lty=3, lwd=2)
#lines(c(-1, p[this]), rep(lp[this], 2), col="#00000044")#, lty=3, lwd=2)
LP    <- c(seq(6, -5, -1)) #log(P/(1-P))
P     <- exp(LP)/(1+exp(LP))#1-c(0.01, 0.05, 0.1, 0.20, 0.3, 0.4, 0.5)
POS   <- c(3, 1, 3, 1, 2, 2, 2, 2, 4, 3, 1, 3)
xOFF  <- c()
Round <- c(3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3)
for(i in 1:length(LP)){
points(LP[i], P[i], col=COL[4], lwd=2)
t1   <- format(round(c(LP,0.9), Round[i]))[i]
t2   <- format(round(P, Round[i]))[i]
temp <- paste("(", t1, ", ", t2, ")", sep="")
text(LP[i], P[i], temp, cex=0.6, pos=POS[i], col=COL[5])
}
#points(lp[this], p[this])
#text(lp[this], p[this], "(-1.39, 0.20)", cex=0.7, pos=4)
# plot(R, c(-0.4, 2.4), type="n", xlab="", ylab="", axes=FALSE)
# lines(0:1, c(2,2))
# segments(0:1, 2-adj, 0:1, 2+adj)
# text(0:1, 2+adj1, 0:1,pos=3)
# text(0.5, 2.1, expression(p[i]), pos=3)
# #arrows(0, 1, R[2], 1, length=0.08)
# #segments(0:(R[2]-1), 1-adj, 0:(R[2]-1), 1+adj)
# pts1 <- pts/(1-pts)
# #segments(pts, 2, pts1, 1)
# arrows(R[1], 0, R[2], 0, length=0.08, code=3)
# segments((R[1]+1):(R[2]-1), -adj, (R[1]+1):(R[2]-1), adj)
# pts2 <- log(pts1)
# arrows(pts, 2, pts2, 0, length=0.05)
# text((R[1]+1):(R[2]-1), rep(-adj1, R[2]-R[1]-2), (R[1]+1):(R[2]-1), pos=1, cex=0.8)
# text(-4, 1, expression(logit(p[i])))
# #abline(h=0:1)
email <- read_csv("data/email.csv")
email <- email %>%
select(spam, to_multiple,cc,attach,dollar,winner,inherit,password,format, re_subj,exclaim_subj)
email <- email %>%
mutate(spam=factor(spam), winner= factor(winner), format= factor(format))
str(email)
email %>%
select(spam,to_multiple) %>%
summary()
email_mod <- glm(spam=="spam"~to_multiple,data=email,family="binomial")
summary(email_mod)
email_mod2 <- glm(spam=="spam"~.,data=email,family="binomial")
summary(email_mod2)
email_mod2 <- glm(spam=="spam"~to_multiple+cc+attach+dollar+winner+inherit+password+format+re_subj,
data=email,family="binomial")
summary(email_mod2)
email_mod2 <- glm(spam=="spam"~to_multiple+attach+dollar+winner+inherit+password+format+re_subj,
data=email,family="binomial")
summary(email_mod2)
library(broom)
tidy(email_mod2) %>%
mutate(p_adjusted=p.adjust(p.value))
augment(email_mod2) %>%
mutate(p_hat=exp(.fitted)/(1+exp(.fitted)),spam_num=as.numeric(`spam == "spam"`)) %>%
gf_point(spam_num~p_hat,alpha=.2) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Predicted propabailites of Spam",x="Predicted Probabilities",
y="Spam") %>%
gf_lm()
set.seed(3012)
noise <- rnorm(3921, sd=0.08)
augment(email_mod2) %>%
mutate(p_hat=exp(.fitted)/(1+exp(.fitted)),spam_num=as.numeric(`spam == "spam"`)) %>%
gf_point((spam_num+noise)~p_hat,alpha=.2) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Predicted propabailites of Spam", subtitle="Jitter for spam condition",
x="Predicted Probabilities",
y="Spam")
confint(email_mod)
do(1)*email_mod
summary(email_mod)
do(1)*glm(formula = spam=="spam" ~ to_multiple, family = "binomial", data = resample(email))
set.seed(5011)
results <- do(1000)*glm(formula = spam=="spam" ~ to_multiple, family = "binomial", data = resample(email))
head(results)
results %>%
gf_histogram(~to_multiple) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Bootstrap sampling distribtuion",
x="to_multiple paramater estimate")
cdata(~to_multiple,data=results)
results_pred <- results %>%
mutate(pred=exp(Intercept+to_multiple)/(1+exp(Intercept+to_multiple)))
cdata(~pred,data=results_pred)
summary(email_mod2)
do(1)*glm(formula = spam=="spam" ~ to_multiple + attach + dollar + winner +
inherit + password + format + re_subj, family = "binomial",
data = email)
set.seed(54321)
results <-do(1000)*glm(formula = spam=="spam" ~ to_multiple + attach + dollar + winner +
inherit + password + format + re_subj, family = "binomial",
data = resample(email))
head(results)
results %>%
gf_histogram(~inherit)
cdata(~inherit,data=results)
email_mod2
summary(email)
email$logit <- log(email_mod2$fitted.values/(1-email_mod2$fitted.values))
# Graph the logit variable against password
ageLinearity <- ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "loess", se = FALSE, color = "orange") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw()
email$logit <- log(email_mod2$fitted.values/(1-email_mod2$fitted.values))
# Graph the logit variable against password
ageLinearity <- ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "loess", se = FALSE, color = "orange") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw()
# Graph the logit variable against password
ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "loess", se = FALSE, color = "orange") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw()
# Graph the logit variable against password
ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw()
500/6
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
library(knitr)
library(mosaic)
library(tidyverse)
libary(openintro)
library(openintro)
immigration
write_csv(immigration,"immigration.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(out.width = "75%")
library(broom)
library(infer)
library(knitr)
library(mosaic)
library(tidyverse)
loans <- read_csv("data/loans.csv")
tally(~term,data=loans,format="percent")
set.seed(2111)
loans200 <- loans %>%
select(interest_rate,loan_amount,term) %>%
mutate(term=factor(term)) %>%
group_by(term) %>%
slice_sample(prop=0.02) %>%
ungroup()
tally(~term,data=loans200,format="percent")
str(loans200)
ggplot(loans200,aes(x=loan_amount,y=interest_rate)) +
geom_point() +
labs(title="Lending Club",subtitle="Loan amount versus Interest rate",
x="Loan Amount",y="Interest rate (percent)") +
theme_bw()
int_rate_mod <- lm(interest_rate~loan_amount,data=loans200)
summary(int_rate_mod)
confint(int_rate_mod)
predict(int_rate_mod,newdata = data.frame(loan_amount=20000),
interval = "confidence",level=0.90)
set.seed(3011)
results <- do(1000)*lm(interest_rate ~ loan_amount,data=resample(loans200))
head(results)
cdata(~loan_amount,data=results)
results2 <- loans200 %>%
specify(interest_rate~loan_amount) %>%
generate(reps=1000,type="bootstrap") %>%
calculate(stat="slope")
head(results2)
get_confidence_interval(results2)
results %>%
mutate(pred=Intercept+loan_amount*20000) %>%
cdata(~pred,data=.)
plot(int_rate_mod)
loans200 %>%
gf_boxplot(interest_rate~term) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Lending Club",x="Length of Loan",y="Interest Rate")
loans200 %>%
gf_dens(~interest_rate,group=~term,color=~term) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Lending Club",x="Length of Loan",y="Interest Rate")
int_rate_mod2 <- lm(interest_rate~term,data=loans200)
summary(int_rate_mod2)
set.seed(331)
results <- do(1000)*lm(interest_rate ~ term,data=resample(loans200))
head(results)
cdata(~term60,data=results)
confint(int_rate_mod2)
plot(int_rate_mod2)
loans200 %>%
gf_dens(~interest_rate,group=~term,color=~term) %>%
gf_theme(theme_classic()) %>%
gf_labs(title="Lending Club",x="Interest Rate",y="Density")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(out.width = "75%")
library(openintro)
library(knitr)
library(mosaic)
library(tidyverse)
head(results[,1:7])
head(results[,1:5])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(out.width = "75%")
library(openintro)
library(knitr)
library(mosaic)
library(tidyverse)
# Graph the logit variable against password
ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw() %>%
geom_labs(title="Linearity check of passwords",
x="Passwords", y="logit scale")
# Graph the logit variable against password
ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw() %>%
gf_labs(title="Linearity check of passwords",
x="Passwords", y="logit scale")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(out.width = "75%")
library(openintro)
library(knitr)
library(mosaic)
library(tidyverse)
library(openintro)
data(COL)
p  <- seq(0.0001, 0.9999, 0.0002)
lp <- log(p/(1-p))
pts  <- seq(0.01, 0.99, length.out=25)
R    <- c(-6,6)
adj  <- 0.07
adj1 <- 0.02
plot(lp, p, ylab="", xlab=expression(logit(p[i])), xlim=c(-5.8, 6.5), ylim=c(-0.05, 1.1), type="n")
lines(lp, p, type="l", col=COL[5], lwd=1.5)
mtext(expression(p[i]), 2, 2.4)
abline(h=0:1, lty=2, col=COL[1], lwd=1.5)
this <- which.min(abs(p-0.2))
#lines(rep(p[this], 2), c(-50, lp[this]), col="#00000044")#, lty=3, lwd=2)
#lines(c(-1, p[this]), rep(lp[this], 2), col="#00000044")#, lty=3, lwd=2)
LP    <- c(seq(6, -5, -1)) #log(P/(1-P))
P     <- exp(LP)/(1+exp(LP))#1-c(0.01, 0.05, 0.1, 0.20, 0.3, 0.4, 0.5)
POS   <- c(3, 1, 3, 1, 2, 2, 2, 2, 4, 3, 1, 3)
xOFF  <- c()
Round <- c(3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3)
for(i in 1:length(LP)){
points(LP[i], P[i], col=COL[4], lwd=2)
t1   <- format(round(c(LP,0.9), Round[i]))[i]
t2   <- format(round(P, Round[i]))[i]
temp <- paste("(", t1, ", ", t2, ")", sep="")
text(LP[i], P[i], temp, cex=0.6, pos=POS[i], col=COL[5])
}
#points(lp[this], p[this])
#text(lp[this], p[this], "(-1.39, 0.20)", cex=0.7, pos=4)
# plot(R, c(-0.4, 2.4), type="n", xlab="", ylab="", axes=FALSE)
# lines(0:1, c(2,2))
# segments(0:1, 2-adj, 0:1, 2+adj)
# text(0:1, 2+adj1, 0:1,pos=3)
# text(0.5, 2.1, expression(p[i]), pos=3)
# #arrows(0, 1, R[2], 1, length=0.08)
# #segments(0:(R[2]-1), 1-adj, 0:(R[2]-1), 1+adj)
# pts1 <- pts/(1-pts)
# #segments(pts, 2, pts1, 1)
# arrows(R[1], 0, R[2], 0, length=0.08, code=3)
# segments((R[1]+1):(R[2]-1), -adj, (R[1]+1):(R[2]-1), adj)
# pts2 <- log(pts1)
# arrows(pts, 2, pts2, 0, length=0.05)
# text((R[1]+1):(R[2]-1), rep(-adj1, R[2]-R[1]-2), (R[1]+1):(R[2]-1), pos=1, cex=0.8)
# text(-4, 1, expression(logit(p[i])))
# #abline(h=0:1)
email <- read_csv("data/email.csv")
email <- email %>%
select(spam, to_multiple,cc,attach,dollar,winner,inherit,password,format, re_subj,exclaim_subj)
email <- email %>%
mutate(spam=factor(spam), winner= factor(winner), format= factor(format))
str(email)
email %>%
select(spam,to_multiple) %>%
summary()
email_mod <- glm(spam=="spam"~to_multiple,data=email,family="binomial")
summary(email_mod)
email_mod2 <- glm(spam=="spam"~.,data=email,family="binomial")
summary(email_mod2)
email_mod2 <- glm(spam=="spam"~to_multiple+cc+attach+dollar+winner+
inherit+password+format+re_subj,
data=email,family="binomial")
summary(email_mod2)
email_mod2 <- glm(spam=="spam"~to_multiple+attach+dollar+winner+
inherit+password+format+re_subj,
data=email,family="binomial")
summary(email_mod2)
library(broom)
tidy(email_mod2) %>%
mutate(p_adjusted=p.adjust(p.value))
augment(email_mod2) %>%
mutate(p_hat=exp(.fitted)/(1+exp(.fitted)),spam_num=as.numeric(`spam == "spam"`)) %>%
gf_point(spam_num~p_hat,alpha=.2) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Predicted propabailites of Spam",x="Predicted Probabilities",
y="Spam") %>%
gf_lm()
set.seed(3012)
noise <- rnorm(3921, sd=0.08)
augment(email_mod2) %>%
mutate(p_hat=exp(.fitted)/(1+exp(.fitted)),spam_num=as.numeric(`spam == "spam"`)) %>%
gf_point((spam_num+noise)~p_hat,alpha=.2) %>%
gf_theme(theme_bw()) %>%
gf_labs(title="Predicted propabailites of Spam", subtitle="Jitter for spam condition",
x="Predicted Probabilities",
y="Spam")
email$logit <- log(email_mod2$fitted.values/(1-email_mod2$fitted.values))
# Graph the logit variable against password
ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw() %>%
gf_labs(title="Linearity check of passwords",
x="Passwords", y="logit scale")
# Graph the logit variable against password
ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw() +
geom_label(title="Linearity check of passwords",
x="Passwords", y="logit scale")
# Graph the logit variable against password
ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw() +
geom_labs(title="Linearity check of passwords",
x="Passwords", y="logit scale")
# Graph the logit variable against password
ggplot(data = email, aes(x = password, y = logit))+
geom_point(color = "gray") +
geom_smooth(method = "lm", se = FALSE, color = "gray") +
theme_bw() +
labs(title="Linearity check of passwords",
x="Passwords", y="logit scale")
