x3 <- qchisq(seq(0.01,0.98, 0.0005), 4)
x3 <- (x3-mean(x3))/sd(x3)
drawSDs <- function(m=0,s=1){
abline(v=m, col='#00000033')
rect(m-s, -5, m+s, 500, col='#00000025', border='#00000000')
rect(m+s, -5, m+2*s, 500, col='#00000015', border='#00000000')
rect(m-s, -5, m-2*s, 500, col='#00000015', border='#00000000')
rect(m+2*s, -5, m+3*s, 500, col='#0000000B', border='#00000000')
rect(m-2*s, -5, m-3*s, 500, col='#0000000B', border='#00000000')
rect(m+4*s, -5, m+3*s, 500, col='#00000008', border='#00000000')
rect(m-4*s, -5, m-3*s, 500, col='#00000008', border='#00000000')
}
x1 <- rep(0:1, c(10,10))
x1 <- (x1-mean(x1))/sd(x1)
x2 <- qnorm(seq(0.0025,0.9975, 0.00049))
x2 <- (x2-mean(x2))/sd(x2)
x3 <- qchisq(seq(0.01,0.98, 0.0005), 4)
x3 <- (x3-mean(x3))/sd(x3)
drawSDs <- function(m=0,s=1){
abline(v=m, col='#00000033')
rect(m-s, -5, m+s, 500, col='#00000025', border='#00000000')
rect(m+s, -5, m+2*s, 500, col='#00000015', border='#00000000')
rect(m-s, -5, m-2*s, 500, col='#00000015', border='#00000000')
rect(m+2*s, -5, m+3*s, 500, col='#0000000B', border='#00000000')
rect(m-2*s, -5, m-3*s, 500, col='#0000000B', border='#00000000')
rect(m+4*s, -5, m+3*s, 500, col='#00000008', border='#00000000')
rect(m-4*s, -5, m-3*s, 500, col='#00000008', border='#00000000')
}
xR <- c(-1,1)*max(c(x1,x2,x3))
gf_histogram(x1, breaks=c(-1.05, -0.95, 0.95, 1.05), xlim=xR, axes=FALSE, xlab='',border=TRUE, lty=1, probability=TRUE, ylim=c(0, 5.6))
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), xlim=xR, axes=FALSE, xlab='',border=TRUE, lty=1, probability=TRUE, ylim=c(0, 5.6))
drawSDs()
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), xlim=xR, axes=FALSE, xlab='',border=TRUE, lty=1, probability=TRUE, ylim=c(0, 5.6)) %>%
drawSDs()
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), xlim=xR, axes=FALSE, xlab='',border=TRUE, lty=1, probability=TRUE, ylim=c(0, 5.6))
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), add=TRUE, probability=TRUE, col=COL[1], ylim=c(0, 0.75))
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75))
gf_histogram(~x1, breaks=c(-1.05, -0.95, 0.95, 1.05), add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75),xlab="")
gf_histogram(~x2, breaks=25, add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75),xlab="")
gf_histogram(~x2, bins=25, add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75),xlab="")
gf_histogram(~x3, bins=25, add=TRUE, probability=TRUE, fill=COL[1], ylim=c(0, 0.75),xlab="")
?boxPlot
data(email50)
data(COL)
d   <- email50$num_char
boxPlot(d, ylab='Number of Characters (in thousands)', xlim=c(0.3,3), axes=FALSE, ylim=range(d)+sd(d)*c(-1,1)*0.2)
axis(2)
arrows(2,0, 1.35,min(d)-0.5, length=0.08)
text(2,0,'lower whisker', pos=4)
arrows(2, quantile(d, 0.25)+sd(d)/7, 1.35, quantile(d, 0.25), length=0.08)
text(2, quantile(d, 0.25)+sd(d)/6.5, expression(Q[1]~~'(first quartile)'), pos=4)
m <- median(d)
arrows(2, m+sd(d)/5, 1.35, m, length=0.08)
text(2,m+sd(d)/4.7,'median', pos=4)
q <- quantile(d, 0.75)
arrows(2, q+sd(d)/4, 1.35, q, length=0.08)
text(2,q+sd(d)/3.8,expression(Q[3]~~'(third quartile)'), pos=4)
arrows(2, rev(sort(d))[4]-sd(d)/7, 1.35, rev(sort(d))[4], length=0.08)
text(2, rev(sort(d))[4]-sd(d)/6.8,'upper whisker', pos=4)
y <- quantile(d, 0.75) + 1.5*IQR(d)
arrows(2, y-0.1*sd(d), 1.35, y, length=0.08)
lines(c(0.72,1.28), rep(y,2), lty=3, col='#00000066')
text(2,y-0.1*sd(d),'max whisker reach', pos=4)
m <- rev(tail(sort(d), 5))
s <- m[1]-0.3*sd(m)
arrows(2, s, 1.1, m[1]-0.2, length=0.08)
arrows(2, s, 1.1, m[2]+0.3, length=0.08)
arrows(2, s, 1.1, m[3]+0.35, length=0.08)
text(2,s,'suspected outliers', pos=4)
points(rep(0.4, 25), rev(sort(d))[1:25], cex=rep(1.3, 25), col=rep(COL[1,3], 25), pch=rep(1, 25))
points(rep(0.4, 25), sort(d)[1:25], cex=rep(1, 25), col=rep(COL[4,3], 25), pch=rep("-", 25))
sort(d)[25:26]
quantile(d, c(0.25, 0.5, 0.75))
tail(sort(d), 4)
boxPlot(d, ylab='', axes=FALSE, ylim=range(d)+sd(d)*c(-1,1)*0.2, xlim=c(0.5, 1.45))
axis(2, cex=1.1)
par(las=0)
mtext("Number of Characters\n(in thousands)", 2, line=2, cex=1.1)
data(email50)
data(COL)
d   <- email50$num_char
boxPlot(d, ylab='Number of Characters (in thousands)', xlim=c(0.3,3), axes=FALSE, ylim=range(d)+sd(d)*c(-1,1)*0.2)
axis(2)
arrows(2,0, 1.35,min(d)-0.5, length=0.08)
text(2,0,'lower whisker', pos=4)
arrows(2, quantile(d, 0.25)+sd(d)/7, 1.35, quantile(d, 0.25), length=0.08)
text(2, quantile(d, 0.25)+sd(d)/6.5, expression(Q[1]~~'(first quartile)'), pos=4)
m <- median(d)
arrows(2, m+sd(d)/5, 1.35, m, length=0.08)
text(2,m+sd(d)/4.7,'median', pos=4)
q <- quantile(d, 0.75)
arrows(2, q+sd(d)/4, 1.35, q, length=0.08)
text(2,q+sd(d)/3.8,expression(Q[3]~~'(third quartile)'), pos=4)
arrows(2, rev(sort(d))[4]-sd(d)/7, 1.35, rev(sort(d))[4], length=0.08)
text(2, rev(sort(d))[4]-sd(d)/6.8,'upper whisker', pos=4)
y <- quantile(d, 0.75) + 1.5*IQR(d)
arrows(2, y-0.1*sd(d), 1.35, y, length=0.08)
lines(c(0.72,1.28), rep(y,2), lty=3, col='#00000066')
text(2,y-0.1*sd(d),'max whisker reach', pos=4)
m <- rev(tail(sort(d), 5))
s <- m[1]-0.3*sd(m)
arrows(2, s, 1.1, m[1]-0.2, length=0.08)
arrows(2, s, 1.1, m[2]+0.3, length=0.08)
arrows(2, s, 1.1, m[3]+0.35, length=0.08)
text(2,s,'suspected outliers', pos=4)
points(rep(0.4, 25), rev(sort(d))[1:25], cex=rep(1.3, 25), col=rep(COL[1,3], 25), pch=rep(1, 25))
points(rep(0.4, 25), sort(d)[1:25], cex=rep(1, 25), col=rep(COL[4,3], 25), pch=rep("-", 25))
mean(~num_char,email50)
mean(num_char,email50)
mean(~num_char,email50)
talle(~num_char,data=email50)
mean(~num_char,data=email50)
mean(~num_char,data=email50)
sd(~num_char,data=email50)
mean(~num_char,data=email50)
sd(~num_char,data=email50)
quantile(~num_char,data=email50)
?quantile
mean(~num_char,data=email50)
sd(~num_char,data=email50)
quantile(~num_char,data=email50)
iqr(~num_char,data=email50)
fav_stats(~num_char,data=email50)
favstats(~num_char,data=email50)
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
dotPlot(p1, at=3, xlab='Number of Characters (in thousands)', ylab='', pch=20, col=COL[1,3], cex=1, ylim=c(0.5,3.5), xlim=c(-3.5e1,151), axes=FALSE)
axis(1, at=seq(0,150,50), cex.axis=0.8)
dotPlot(p1, at=3, xlab='Number of Characters (in thousands)', ylab='', pch=20, col=COL[1,3], cex=1, ylim=c(0.5,3.5), xlim=c(-3.5e1,151), axes=FALSE)
?dotPlot
cbind(p1,p2,p3)
rbind(p1,p2,p3)
c(p1,p2,p3)
robust
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
robust
gf_boxplot(value~group,data=robust)
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
gf_boxplot(value~group,data=robust,ylab="Number of Characters (in thousands)",xlab="Data Group")
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
gf_boxplot(value~group,data=robust,ylab="Number of Characters (in thousands)",xlab="Data Group")
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
gf_boxplot(value~group,data=robust,ylab="Number of Characters (in thousands)",xlab="Data Group") %>%
gf_theme(theme_classic())
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
robust <- data.frame(value= c(p1,p2,p3),group=c(rep("Original",50),rep("Dropped",49),rep("Increased",50)))
favstats(value~group,data=robust)
gf_histogram(salary/1000,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
MLB
gf_histogram(~salary,data=MLB,main="", breaks=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", bins=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1])
gf_histogram(~salary/1000,data=MLB,main="", bins=15, xlab="Salary (millions of dollars)", ylab="", fill=COL[1]) %>%
gf_theme(theme_classic())
gf_histogram(~log(salary/1000), data=MLB , bins=15, xlab=expression(log[e]*"(Salary), where Salary is in millions USD"), ylab="", fill=COL[1])
gf_histogram(~log(salary/1000), data=MLB , bins=15, xlab=expression(log[e]*"(Salary), where Salary is in millions USD"), ylab="", fill=COL[1]) %>%
gf_theme(theme_classic())
data(COL)
plot(log(email50$num_char), log(email50$line_breaks), pch=19, cex=1.3, col=COL[1,4], xlab="", ylab="Number of Lines", axes=FALSE)
axis(2)
axis(1)
box()
points(log(email50$num_char), log(email50$line_breaks), cex=1.3, col=COL[1,1])
mtext("Number of Characters (in thousands)", 1, 1.9)
names(county)
install.packages("maps")
install.packages("usmap")
library(tidyverse)
library(mosaic)
library(openintro)
library(maps)
map_data("state")
county
map_data("county")
names(countyComplete)
head(countyComplete)
county
head(countyComplete)
map("county")
map_data("county")
?text
?boxPlot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(openintro)
tally(~spam,data=email)
names(email)
tally(number~spam,data=email)
tally(spam~number,data=email)
tally(spam~number,data=email,margins = TRUE)
tally(~spam+number,data=email,margins = TRUE)
glimpse(email)
factor(email$spam,levels=c("spam","not spam"))
factor(email$spam)
as.factor(email$spam,levels=c("spam","not spam"))
?factor
as.factor(email$spam,labels=c("spam","not spam"))
factor(email$spam,levels=c(1,0),labels=c("spam","not spam"))
email <- email %>%
mutate(spam = factor(email$spam,levels=c(1,0),labels=c("spam","not spam")))
tally(~spam+number,data=email,margins = TRUE)
tally(~spam+number,data=email,margins = TRUE)
?email
library(openintro)
inspect(email)
library(openintro)
email %>%
select(spam,number) %>%
inspect()
data(email)
library(openintro)
email %>%
select(spam,number) %>%
inspect()
email <- email %>%
mutate(spam = factor(email$spam,levels=c(1,0),labels=c("spam","not spam")))
email %>%
select(spam,number) %>%
inspect()
tally(~spam+number,data=email,margins = TRUE)
tally(~number,data=email)
tally(~number,data=email,format='proportions')
tally(~number,data=email,format='proportion')
?tally
tally(~number,data=email,format='percent')
round(tally(~number,data=email,format='percent'),2)
round(tally(~number,data=email,format='percent'),3)
round(tally(~number,data=email,format='percent'),2)
email %>%
gf_bar(~number)
email %>%
gf_bar(~number)
email %>%
gf_props(~number)
email %>%
gf_bar(~number)
email %>%
gf_props(~number)
email %>%
gf_props(~number,title="The proportions of emails with a number in it")
email %>%
gf_props(~number,title="The proportions of emails with a number in it",subtitle="From 2012",x="",y="Proportion of emails")
?gf_props
email %>%
gf_props(~number,title="The proportions of emails with a number in it",subtitle="From 2012",xlab="",ylab="Proportion of emails")
email %>%
gf_props(~number,title="The proportions of emails with a number in it",subtitle="From 2012",xlab="Type of number in the email",ylab="Proportion of emails")
email %>%
gf_props(~number,title="The proportions of emails with a number in it",subtitle="From 2012",xlab="Type of number in the email",ylab="Proportion of emails") %>%
gf_theme(theme_bw())
?tally
tally(spam~number,data=email,margins = TRUE,format='proportion')
tally
mosaic::tally
149/549
tally(number~spam,data=email,margins = TRUE,format='proportion')
?geom_mosaic
names(email)
inspect(email)
names(countyComplete)
install.packages("socviz")
library(socviz)
names(county_data)
head(county_data)
?left_join
tally(spam~format,data=email,margins = TRUE,format='proportion')
tally(spam~format,data=email,margins = TRUE)
email <- email %>%
mutate(format = factor(email$format,levels=c(1,0),labels=c("HTML","text")))
tally(spam~format,data=email,margins = TRUE)
tally(spam~format,data=email,margins = TRUE,format="proportion")
tally(spam~number,email,format='proportion',margin=TRUE)
tally(number~spam,email,format='proportion',margin=TRUE)
email %>%
gf_props(spam~number)
email %>%
gf_props(~number)
email %>%
gf_props(~number,fill=~spam)
email %>%
gf_props(~number,fill=~spam,position='fill')
email %>%
gf_bar(~number,fill=~spam,position='fill')
email %>%
gf_bar(~number,fill=~spam,position='fill')
email %>%
gf_bar(~number,fill=~spam)
install.packages("vcdExtra")
library(vcd)
mosaic(~number,data=email)
mosaic(number~,data=email)
?mosaic
mosaic(number,data=email)
mosaic(email$number)
mosaic(number,data=email)
mosaic(number~1,data=email)
mosaic(~number,data=email)
mosaic(~number,data=email)
mosaic(spam~number,data=email)
mosaic(spam~number,data=email,shade=TRUE)
mosaic(~spam+number,data=email,shade=TRUE)
mosaic(~spam+number,data=email)
mosaic(spam~number,data=email)
mosaic(spam~number,data=email,legend=TRUE)
mosaic(spam~number,data=email)
mosaic(number~spam,data=email)
mosaic(~number,data=email)
mosaic(~number+spam,data=email)
mosaic(~spam+number,data=email)
mosaic(spam~number,data=email)
mosaic(~spam+number,data=email)
tally(~spam+number,data=email)
tally(~spam+number,data=email,format='proportion')
tally(spam~number,data=email,format='proportion')
tally(~spam+number,data=email,format='proportion')
tally(~number+spam,data=email,format='proportion')
mosaic(~number+spam,data=email)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(openintro)
library(tidyverse)
library(mosaic)
library(openintro)
library(vcd)
library(vcdExtra)
library(vcd)
as.data.frame(xtabs(~ Treatment + Sex + Improved, data = Arthritis))
mosaic(~spam+number,data=email)
tally(spam~number,data=email)
tally(number~spam,data=email)
tally(number~spam,data=email,margins = TRUE)
tally(number~spam,data=email,margins = TRUE,format="proportion")
mosaic(~spam+number,data=email)
mosaic(spam~number,data=email)
mosaic(spam~number,data=email)
mosaic(~spam+number,data=email)
tally(~spam,data=email,margins = TRUE,format="proportion")
tally(~spam,data=email,format="proportion")
pie(table(email$number), col=COL[c(3,1,2)], radius=0.75)
pie(table(email$number), col=COL[c(3,1,2)], radius=0.75)
countyComplete %>%
summary()
countyComplete %>%
inspect()
countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
inspect()
?sign
cc_reduced <- countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
cc_reduced %>%
tally(~pop_gain)
cc_reduced %>%
inspect(pop_gain)
cc_reduced <- countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
cc_reduced %>%
head()
cc_reduced %>%
tally(~pop_gain)
cc_reduced %>%
tally(pop_gain)
dim(cc_reduced)
table(cc_reduced$pop_gain)
cc_reduced <- countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000-.5))
table(cc_reduced$pop_gain)
head(cc_reduced)
?tally
cc_reduced %>%
mosaic::tally(~pop_gain)
cc_reduced %>%
tally(~factor(pop_gain))
cc_reduced %>%
tally(~as.factor(pop_gain))
class(cc_reduced)
class(cc_reduced$pop_gain)
data(email)
tally(~spam+number,data=email,margins = TRUE)
email %>%
select(spam,number) %>%
inspect()
cc_reduced %>%
tally(pop_gain)
?tally
library(tidyverse)
library(vcd)
library(vcdExtra)
library(openintro)
library(mosaic)
cc_reduced %>%
tally(pop_gain)
cc_reduced %>%
tally(~pop_gain)
summary(cc_reduced$pop_gain)
dim(cc_reduced)
cc_reduced %>%
tally(~pop_gain,na.rm=TRUE)
cc_reduced %>%
tally(pop_gain,na.rm=TRUE)
cc_reduced %>%
drop_na(pop_gain) %>%
tally(~pop_gain)
cc_reduced <- countyComplete %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
table(cc_reduced$pop_gain)
sum(table(cc_reduced$pop_gain))
dim(cc_reduced)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
dim(cc_reduced)
cc_reduced %>%
tally(~pop_gain)
table(cc_reduced$pop_gain)
class(cc_reduced$pop_gain)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = factor(sign(pop2010-pop2000)))
summary(cc_reduced)
cc_reduced %>%
tally(~pop_gain)
cc_reduced %>%
tally(pop_gain)
library(openintro)
library(mosaic)
knitr::opts_chunk$set(echo = TRUE)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = factor(sign(pop2010-pop2000)))
library(dplyr)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = factor(sign(pop2010-pop2000)))
help(drop_na)
library(tidyr)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = factor(sign(pop2010-pop2000)))
cc_reduced %>%
tally(~pop_gain)
tally(~spam+number,data=email,margins = TRUE)
cc_reduced %>%
tally(~pop_gain,data=.)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
tally(~pop_gain,data=cc_reduced)
cc_reduced <- cc_reduced %>%
filter(pop_gain != 0) %>%
mutate(pop_gain = factor(pop_gain))
tally(~pop_gain,data=cc_reduced)
inspect(cc_reduced)
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain)
cc_reduced <- countyComplete %>%
drop_na(pop2000) %>%
select(pop2000,pop2010,median_household_income) %>%
mutate(pop_gain = sign(pop2010-pop2000))
cc_reduced <- cc_reduced %>%
filter(pop_gain != 0) %>%
mutate(pop_gain = factor(pop_gain,levels=c(-1,1),labels=c("Loss","Gain")))
inspect(cc_reduced)
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain)
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain,subtitle="The income data were collected between 2006 and 2010.")
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain,subtitle="The income data were collected between 2006 and 2010.",xlab="Population change from 2000 to 2010")
cc_reduced %>%
gf_boxplot(median_household_income~pop_gain,
subtitle="The income data were collected between 2006 and 2010.",
xlab="Population change from 2000 to 2010",
ylab="Median Household Income")
cc_reduced %>%
gf_density(~median_household_income,color=~pop_gain)
cc_reduced %>%
gf_dens(~median_household_income,color=~pop_gain)
?gf_dens
cc_reduced %>%
gf_dens(~median_household_income,color=~pop_gain,lwd=2)
cc_reduced %>%
gf_dens(~median_household_income,color=~pop_gain,lwd=1)
